package no.phasfjo.infrastructure.customer;

import no.phasfjo.dto.account.Account;
import no.phasfjo.dto.address.Address;
import no.phasfjo.dto.customer.Customer;
import no.phasfjo.infrastructure.account.JpaAccountDao;
import no.phasfjo.infrastructure.address.JpaAddressDao;
import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import javax.persistence.Cache;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.util.Date;
import java.util.List;

import static org.junit.Assert.*;

/**
 * Created by paulhasfjord on 17.01.2017.
 */
public class CustomerIT {

    private EntityManager entityManager;
    private EntityManagerFactory factory;
    private JpaCustomerDao jpaCustomerDao;
    private JpaAccountDao jpaAccountDao;
    private JpaAddressDao jpaAddressDao;
    private int generateID = 0;


    @Before
    public void setup() throws Exception {
        factory = Persistence.createEntityManagerFactory("TEST");
        entityManager = factory.createEntityManager();
        jpaCustomerDao = new JpaCustomerDao(entityManager);
        jpaAccountDao = new JpaAccountDao(entityManager);
        jpaAddressDao = new JpaAddressDao(entityManager);
    }

    @After
    public void tearDown() throws Exception {

        entityManager.close();
        factory.close();
    }


    /*
    Testing persist of a new customer, with login and account data. Nb! The login and account data is chancing every day..
     */
    @Test
    public void testPersistCustomer() throws Exception {
        Address address = new Address("Innspurten 14", "Oslo", "Oslo", "0663", "Norway");
        address.setId(1);
        entityManager.getTransaction().begin();
        Customer customer = new Customer("Per", "Hansen", "per@yahoo.no", "92130123", new Date("08/01/1981 20:00:00 GMT"), address);
        jpaCustomerDao.persist(customer);
        entityManager.getTransaction().commit();
        Customer result = jpaCustomerDao.persist(customer);
        assertTrue(result.getId() > 0);

        System.out.println(result);
        assertNotEquals(result.toString(), "Customer{customerId=1, firstName='Per', lastName='Hansen', email='per@yahoo.no', phoneNumber='921301323', birth=1981-01-08, login=no.phasfjo.dto.login.Login@687a762c, account=no.phasfjo.dto.account.Account@1a2e2935}");
    }

    /*
        Testing autogenerated id. Counting +1 per new persist. And testing that the new customer has the same data.
     */
    @Test
    public void createCustomersGenerateNewIdTest() throws Exception {

        Address address = new Address("Innspurten 14", "Oslo", "Oslo", "0663", "Norway");
        address.setId(1);
        Address address2 = new Address("106 E Industrial Rd", "Oslo", "Minnesota", "56744", "USA");
        address2.setId(2);
        Customer customer = new Customer("Ola", "Hansen", "ola@yahoo.no", "90020100", new Date("5/10/1999"), address);
        Customer customer2 = new Customer("Per", "Smith", "per@yahoo.no", "98321030", new Date("20/10/1989"), address2);

        entityManager.getTransaction().begin();
        Customer result = jpaCustomerDao.persist(customer);
        assertEquals("ola@yahoo.no", result.getEmail());
        assertEquals(50, result.getId());

        Customer result2 = jpaCustomerDao.persist(customer2);
        entityManager.getTransaction().commit();

        assertEquals("Smith", result2.getLastName());
        assertEquals(51, result2.getId());
    }

    /*
    Testing script.init is read and putted into memory. Reading customer data and comparing them to the init script.
     */
    @Test
    public void getCustomerByIdFromPreviouslyGeneratedSql() throws Exception {

        Customer customer = jpaCustomerDao.findById(1);
        Customer customerTwo = jpaCustomerDao.findById(2);

        assertEquals("Kim", customer.getFirstName());
        assertEquals("silje@yahoo.no", customerTwo.getEmail());
        assertEquals(1, customer.getId());
        assertEquals(2, customerTwo.getId());
    }

    /*
    Testing update function on previous data input from init2.sql file
     Testing customer with id 1 from init-script file.
     */

    @Test
    public void updateDataInputByInitScriptTest() throws Exception {

        Customer customer = jpaCustomerDao.findById(1);
        entityManager.detach(customer);

        customer.setEmail("test@yahoo.no");
        boolean updated = jpaCustomerDao.update(customer);
        Customer result = jpaCustomerDao.findById(1);
        assertTrue(updated);
        assertEquals("test@yahoo.no", result.getEmail());
    }

    /*
    Test removing of a customer that is previous input with init.script.
    Test that the value is removed must remove with account because of one-one annotation.
     */

    @Test
    public void deleteACustomerCreatedWithInitScriptTest() throws Exception {

        Account account = jpaAccountDao.findById(1);
        Customer customer = jpaCustomerDao.findById(1);

        entityManager.detach(account);
        entityManager.getTransaction().begin();
        boolean deletedCustomer = jpaCustomerDao.delete(customer.getId());
        boolean deletedAccount = jpaAccountDao.delete(account.getId());
        entityManager.getTransaction().commit();

        Customer resultC = jpaCustomerDao.findById(1);

        assertNull(resultC);
        assertSame(deletedAccount, deletedCustomer);
        assertEquals(deletedAccount, deletedCustomer);
        assertTrue(deletedAccount);
        assertNotEquals("Customer{customerId=1, firstName='Kim', lastName='Pedersen', email='kim@yahoo.no', phoneNumber='90045870', birth=1980-11-05 00:00:00.0, address='Address{id=1, street='189 2 Ave', city='New York', state='New York', zipcode='10003', country='USA'}'", resultC);
    }

    /*
    Test getting all customers that has been putted into db.
    This test is just getting data created by the init script.
     */
    @Test
    public void getAllCustomersFromDbCreatedWithInitTest() throws Exception {

        List<Customer> customerList = jpaCustomerDao.getAll();
        assertTrue(customerList.size() != 0);
        assertEquals(2, customerList.size());
    }

    @Test
    public void getAllCustomersPlusOneTest() throws Exception {

        Address address = new Address("Trådstadvegen 2", "Kongsvinger", "Hedemark", "2213", "Norway");
        address.setId(1);
        Customer newCustomer = new Customer("kaj", "dank", "dankero@yahoo.no", "90023320", new Date("1/5/1981 20:00:00 GMT"), address);

        entityManager.getTransaction().begin();
        jpaCustomerDao.persist(newCustomer);
        entityManager.getTransaction().commit();

        List<Customer> customerList = jpaCustomerDao.getAll();

        //TEST
        assertNotNull(customerList.isEmpty());
        assertTrue(customerList.size() > 0);
        assertEquals(customerList.size(), 3);
        assertEquals(customerList.get(0), jpaCustomerDao.findById(1));
        assertEquals(customerList.get(1), jpaCustomerDao.findById(2));
        assertEquals(customerList.get(2), jpaCustomerDao.findById(50));
        assertEquals(customerList.get(2).getAddress(), jpaCustomerDao.findById(50).getAddress());

    }

    /*
     UPDATE CUSTOMER FIRST + LAST NAME
     */
    @Test
    public void getCustomerAndUpdate() throws Exception {
        Customer customer = jpaCustomerDao.findById(1);
        customer.setFirstName("Åge");
        customer.setLastName("Hansen");

        entityManager.getTransaction().begin();
        boolean updated = jpaCustomerDao.update(customer);
        entityManager.getTransaction().commit();

        assertTrue(updated);
        assertNotSame("Kim", jpaCustomerDao.findById(1).getFirstName());
        assertNotSame("Pedersen", jpaCustomerDao.findById(1).getLastName());

    }

    /*
    //TODO java.lang.AssertionError = value is False?
     */

    private int generateID(){
        generateID++;
        return generateID;
    }

    @Test
    @Ignore
    public void shouldCheckThatCustomerIsCacheableEqualsTrue() throws Exception {

        Customer newCustomer = new Customer("Kaj Åge", "Dankø", "dankero@yahoo.no", "90023320", new Date("1/5/1981 20:00:00 GMT"), new Address(generateID(),"Trådstadvegen 2", "Kongsvinger", "Hedemark", "2213", "Norway"));

        entityManager.getTransaction().begin();
        jpaCustomerDao.persist(newCustomer);
        entityManager.getTransaction().commit();

        assertNotNull(newCustomer.getId());
        Cache cache = factory.getCache();

        assertTrue(cache.contains(Customer.class, newCustomer.getId()));

        cache.evict(Customer.class);

        //Cache is cleared and no longer cached.
        assertFalse(cache.contains(Customer.class, newCustomer.getId()));
    }
}
